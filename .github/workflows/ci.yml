on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  main:
    runs-on: ubuntu-22.04

    env:
      IS_TEST: ${{ startsWith(github.ref, 'refs/pull') }}
      IS_PROD: ${{ startsWith(github.ref, 'refs/heads/main') }}
      DISCORD_INCOMING_WEBHOOK: ${{ secrets.DISCORD_INCOMING_WEBHOOK }}

    steps:
      # 標準機能
      - uses: actions/checkout@v4

      # Protoをアクティベート
      - uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true

      # ライブラリのキャッシュ
      - uses: actions/cache@v3
        id: bun-cache
        with:
          path: node_modules
          key: bun-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-

      # ライブラリのインストール(キャッシュに引っかからなかった時のみ)
      - name: Install
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install --no-save

      # 環境変数の設定
      - name: Set env
        run: |
          echo URL_PROD=\'${{ secrets.URL_PROD }}\' >> .env.toml
      - name: Set TEST env
        if: env.IS_TEST == 'true'
        run: |
          echo ENVIRONMENT=\'TEST\' >> .env.toml
          echo "DISCORD_PREFIX=🧪 Updated TEST env: " >> $GITHUB_ENV
      - name: Set PROD env
        if: env.IS_PROD == 'true'
        run: |
          echo ENVIRONMENT=\'PROD\' >> .env.toml
          echo "DISCORD_PREFIX=🚀 Released PROD env: " >> $GITHUB_ENV

      # ビルド
      # ビルド直前にライブラリの直接上書きによるOGPの設定変更
      - name: Build
        run: |
          sed -i '32a worker.get("/opengraph-image.jpg",serveStatic())' node_modules/@hono/vite-cloudflare-pages/dist/entry.js
          sed -i '32a worker.get("/favicon.svg",serveStatic())' node_modules/@hono/vite-cloudflare-pages/dist/entry.js
          sed -i '32a worker.get("/apple-touch-icon.png",serveStatic())' node_modules/@hono/vite-cloudflare-pages/dist/entry.js
          bun run build

      # デプロイ
      - name: Deploy
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./dist --project-name="${{ secrets.CLOUDFLARE_PROJECT_NAME }}" --branch="foo" --commit-dirty=true

      # Discordに通知
      - name: Notify Discord
        run: |
          curl -H 'Content-Type:application/json' -d "{\"content\": \"$DISCORD_PREFIX $DEPLOYMENT_URL\"}" $DISCORD_INCOMING_WEBHOOK
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment-url }}
